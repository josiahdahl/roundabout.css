/*
  Carousel structure as follows:
    div#carousel 
    -    width of container, height dictated by height of tallest image
    -    make sure that either....images are the same height, or somehow center align them
      div.item-container 
      -    items live here, have the same padding/border/background/whatever
      -    all floated left
      div.controls
      -    Control items, however it works etc
        


*/
/*
  Get the number of items, at each step, slide left until out of viewport, then translate
  to end of row
*/
// @include slideAnimation(5, 600, 400);
@mixin animationSettings($items, $duration) {
  animation-duration: $items * $duration;
  animation-delay: $duration;
  animation-iteration-count: infinite;
  animation-timing-function: ease;
}
@mixin slideAnimation($items, $duration, $itemWidth) {
  
  // Create Animations
  $keyframePercent: 100 / $items;
  @for $itemNum from 1 through $items {
    // Create animation for each slide
    @keyframes slide-#{$itemNum} {
      // // Check for opacity requirement (for sliding to the far right)
      // $makeInvisible: false;
      // $keyframePercentInvisible: false;
      // $keyframePercentTranslateRight: false;
      // 
      // // Create special keyframes for moving to end of queue
      // @if $makeInvisible {
      //   #{$keyframePercentInvisible} {
      //     opacity: 0;
      //   }
      //   #{$keyframePercentTranslateRight} {
      //     transform: translateX(($items - 1) * $itemWidth + px);
      // 
      //   }
      // }
      
      
      // Create each keyframe
      @for $keyframe from 0 through $items {
        #{$keyframe * $keyframePercent * 1%} {
          $startingOffset: ($itemNum - 1) * $itemWidth;
          // Set to starting offset for first (0) keyframe
          @if ($keyframe == 0) {
            // left: $startingOffset + px;
            // left: $startingOffset + px;
          }
          // If we're not in the first keyframe
          @else {
            $offset: -1 * $keyframe * $itemWidth;
            // If our offset is going to be greater than keyframe * 100%, go opaque
            // If our offset is going to be greater than keyframe * 200%, go to end
            @if $offset < -1 * $itemNum * $itemWidth {
              opacity: 0;
            }
            @else if $offset < -2 * $itemNum * $itemWidth {
              opacity: 1;
              transform: translateX(100%);
            }
            @else {
              transform: translateX()
            }
            
            // $offset: $startingOffset - ($keyframe * $itemWidth);
            // Set the keyframe to make it invisible and also the keyframe to
            // At this point the item is invisible
            // @if $offset < (-1 * $itemWidth) {
            //   $makeInvisible: true;
            //   $keyframePercentInvisible: ($keyframe * $keyframePercent + 1) * 1%;
            //   $keyframePercentTranslateRight: $keyframePercentInvisible + 1;
            //   
            // }
            // Transition back to end
            // @if $offset < (-1 * $itemWidth) {
            //   // Set the item's left offset to the end of the line
            //   // left: ($items - $keyframe + $itemNum - 1) * $itemWidth + px;
            //   // transform: translateX(($items - $keyframe + $itemNum - 1) * $itemWidth + px);
            // }
            // @else {
              // left: $offset + px;
              // transform: translateX($offset + px);
              
              // opacity: 1;
            // }
          }
        }
      }
    }
  }
  // Create slide selectors
  @for $itemNum from 1 through $items {
    .roundabout--item:nth-child(#{$itemNum}) {
      // transform: translateX(($itemNum - 1) * $itemWidth + px);
      left: ($itemNum - 1) * $itemWidth + px;
      animation-name: slide-#{$itemNum};
      @include animationSettings($items, $duration);
    }
  }
}
@mixin roundabout($items, $itemWidth, $viewportWidth, $viewportHeight) {
  @include slideAnimation($items: $items, $duration: 3s, $itemWidth: 400);
  width: $viewportWidth + px;
  position: relative;
  overflow: hidden;
  height: $viewportHeight + px;  
  .roundabout--items {
    position: relative;
    width: ($items + 1) * $itemWidth + px; // get number of items and desired item width in mixin 
    height: 100%;
  }
  .roundabout--item {
    box-sizing: border-box;
    width: $itemWidth + px;
    height: $viewportHeight + px;
    line-height: $viewportHeight + px;
    
    padding: 10px;
    display: inline-block;
    top: 0;
    position: absolute;
  
  }
  .roundabout--item img {
    height: 100%;
  }
  .roundabout-items:hover {
    animation-play-state: paused;
  }
  
}
#roundabout {
  @include roundabout($items: 4, $itemWidth: 400, $viewportWidth: 600, $viewportHeight: 250);
}
