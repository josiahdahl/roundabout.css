

/**
 *  Applies animation settings
 *
 *  $duration - Total animation time
*/
@mixin animationSettings($duration) {
  animation-duration: $duration + s;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
}

/**
 *  Creates animations for the slides
 *
 *  $items          The Number of items in the carousel
 *  $transitionTime How long the transition takes between slides (seconds)
 *  $visibleTime    How long each slide pauses (seconds)
 *  $slideWidth     How wide each slide is
 *  $slideMargin    Margin on each slide
 */
@mixin slideAnimation($items, $transitionTime, $visibleTime, $slideWidth: 400, $slideMargin: 0) {
  // Use 1% for the quick as possible movements. This number can change as necessary.
  $movementKeyframeSize: 1;
  // Percentage of the total time the item moves
  $slideMovementPercent: 100 / $items * ($transitionTime / ($transitionTime + $visibleTime));
  // Percentage of the total time the item is stationary
  $slideStillPercent: 100 / $items * ($visibleTime / ($transitionTime + $visibleTime));
  // Total slide width
  $totalSlideWidth: $slideWidth + $slideMargin * 2;

  @for $slideNum from 1 through $items {
    // Create animation for each item in the carousel
    @keyframes slide-#{$slideNum} {
      $leftPosition: ($slideNum - 1) * ($totalSlideWidth);
      // Set the last slide position to the left of the first slide
      @if ($slideNum == $items) {
        $leftPosition: -1 * $totalSlideWidth;
      }
      // Starting and Ending Locations
      0%, 100% {
        // exclude the px on 0
        @if ($leftPosition == 0) {
          left: $leftPosition;
        } @else {
          left: $leftPosition + px;
        }
      }

      @for $itemNum from 1 through $items {
        //@if ($itemNum == $items and $slideNum != $items) {
        //  // This makes the transition only happen on the last slide
        //  // Otherwise the percents are all messy
        //} @else {
        $movementKeyframe: ($slideMovementPercent * ($itemNum - 1)) + ($slideStillPercent * $itemNum);
        // Handle transition to the right
        // If $leftposition is negative, move to far right => last item start position
        @if ($leftPosition < 0) {
          // 2 - Make item transparent
          #{$movementKeyframe + ($movementKeyframeSize) * 1%} {
            left: $leftPosition + px;
            opacity: 0;
          }
          // 3 - make item left all the way to the end (last item start position)
          #{$movementKeyframe + ($movementKeyframeSize * 2) * 1%} {
            $leftPosition: ($items - 1) * $totalSlideWidth;
            opacity: 0;
            left: $leftPosition + px;
          }
          // 4 - make item visible
          #{$movementKeyframe + ($movementKeyframeSize * 3) * 1%} {
            opacity: 1;
          }
        }
          // If it doesn't have to move, make sure that it stays at the current position while the
          // slide that is moving is done moving
        @else {
          #{$movementKeyframe * 1%} {
            @if ($leftPosition == 0) {
              left: $leftPosition;
            } @else {
              left: $leftPosition + px;
            }
          }
        }
        // Move slide to the left
        #{ $movementKeyframe + $slideMovementPercent * 1%} {
          $leftPosition: $leftPosition -  $totalSlideWidth;
          @if ($leftPosition == 0) {
            left: $leftPosition;
          } @else {
            left: $leftPosition + px;
          }
          opacity: 1;
        }
      }

    }
  }
}

/**
 *  The entry mixin
 *
 *  $items            The number of items in the carousel
 *  $viewportWidth    How width is the viewport
 *  $viewportHeight   How high is the viewport
 *  $slideWidth       How wide each slide is. Recommended right now is the viewport width
 *  $transitionTime   How long it takes to go to a new slide
 *  $visibleTime      How long the slide stays visible (still)
 *  $slideMargin      Margin left and right on slide. Probably doesn't need to be added
 */

@mixin roundabout($items, $viewportWidth, $viewportHeight, $slideWidth, $transitionTime: 1, $visibleTime: 3, $slideMargin: 0) {
  @include slideAnimation($items: $items, $transitionTime: $transitionTime, $visibleTime: $visibleTime, $slideWidth: $slideWidth, $slideMargin: $slideMargin);

  $duration: $items * $transitionTime * $visibleTime;

  width: $viewportWidth + px;
  position: relative;
  overflow: hidden;
  height: $viewportHeight + px;
  margin: 0 auto;
  .roundabout-slides {
    $width: $items * ($slideWidth + $slideMargin * 2) + px; // get number of items and desired item width in mixin
    position: relative;
    width: $width;
    height: 100%;
    //left: -1 * $width / 2;
  }
  .roundabout-slide {
    box-sizing: border-box;
    width: $slideWidth + px;
    height: $viewportHeight + px;
    margin: 0 $slideMargin;
    display: inline-block;
    top: 0;
    position: absolute;
    text-align: center;
  }
  // Create slide selectors
  @for $itemNum from 1 through $items {
    .roundabout-slide:nth-child(#{$itemNum}) {
      @if ($itemNum == $items) {
        left: -1 * ($slideWidth + $slideMargin * 2) + px;
      } @else {
        left: ($itemNum - 1) * ($slideWidth + $slideMargin * 2) + px;
      }
      animation-name: slide-#{$itemNum};
      @include animationSettings($duration);
    }
  }
}